/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.OkotaArea;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import javax.swing.GroupLayout;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import org.jdesktop.swingx.prompt.PromptSupport;

/**
 *
 * @author chinex
 */
public class Discipleship extends javax.swing.JPanel {

    /**
     * Creates new form Discipleship
     */
 private final HomeFront front; 
 private final HomePanel  home;
  DBOperations db = new DBOperations();
  SubPanelUpdater d = new SubPanelUpdater(this);
    public Discipleship(HomeFront front, HomePanel  home) {
        initComponents();
        this.front = front;
        this.home = home;
         UpdateDiscipleshipRegPanel.setVisible(false);
         AllAttendedDiscipleshipRegPanel.setVisible(false);
        textCustomise("Enter First Name", FirstNameTf);
        textCustomise("Enter Last Name", LastNameTf);
        textCustomise("Enter Phone Number ", PhoneNumberTF);
        textCustomise("Enter Cell Jurisdiction", HomeCellJurisdiction);
    }
    private void textCustomise(String text, JTextField component)
    {
        PromptSupport.setPrompt(text, component);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, component);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.SHOW_PROMPT, component);
        PromptSupport.setFontStyle(Font.BOLD, component);
        PromptSupport.setForeground(Color.darkGray, component);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        DiscipleshipHomepanel = new javax.swing.JPanel();
        dcaBackbutton = new javax.swing.JButton();
        DCABasicCombobox = new javax.swing.JComboBox();
        DCAMaturityCombobox = new javax.swing.JComboBox();
        EncouterCombobox = new javax.swing.JComboBox();
        DLICombobox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        BackgroundPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        UpdateDiscipleshipRegPanel = new javax.swing.JPanel();
        basicDateChooser = new com.toedter.calendar.JDateChooser();
        updatediscipleshipLabel = new javax.swing.JLabel();
        updateDispleshipButton = new javax.swing.JButton();
        FirstNameTf = new javax.swing.JTextField();
        LastNameTf = new javax.swing.JTextField();
        PhoneNumberTF = new javax.swing.JTextField();
        HomeCellJurisdiction = new javax.swing.JTextField();
        AllAttendedDiscipleshipRegPanel = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        alldiscipleshipTable = new javax.swing.JTable();
        DiscipleshipAllattendeLabel = new javax.swing.JLabel();
        sendmessageCombobox = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(146, 198, 227));

        dcaBackbutton.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        dcaBackbutton.setText("BACK");
        dcaBackbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dcaBackbuttonActionPerformed(evt);
            }
        });

        DCABasicCombobox.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        DCABasicCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DCA Basic", "Update DCA Basic", "All Attended DCA Basic", "All Not Attended DCA Basic" }));
        DCABasicCombobox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                DCABasicComboboxMouseEntered(evt);
            }
        });
        DCABasicCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DCABasicComboboxActionPerformed(evt);
            }
        });

        DCAMaturityCombobox.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        DCAMaturityCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DCA Maturity", "Update DCA Maturity", "All Attended DCA Maturity", "All Not Attended DCA Maturity" }));
        DCAMaturityCombobox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                DCABasicComboboxMouseEntered(evt);
            }
        });
        DCAMaturityCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DCAMaturityComboboxActionPerformed(evt);
            }
        });

        EncouterCombobox.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        EncouterCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Encounter", "Update Encounter", "All Attended Encounter", "All Not Attended Encounter" }));
        EncouterCombobox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                DCABasicComboboxMouseEntered(evt);
            }
        });
        EncouterCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncouterComboboxActionPerformed(evt);
            }
        });

        DLICombobox.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        DLICombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DLI", "Update DLI", "All Attended DLI", "All Not Attended DLI" }));
        DLICombobox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                DCABasicComboboxMouseEntered(evt);
            }
        });
        DLICombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DLIComboboxActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/OkotaArea/logo smallsma.png"))); // NOI18N
        jLabel1.setToolTipText("");

        javax.swing.GroupLayout DiscipleshipHomepanelLayout = new javax.swing.GroupLayout(DiscipleshipHomepanel);
        DiscipleshipHomepanel.setLayout(DiscipleshipHomepanelLayout);
        DiscipleshipHomepanelLayout.setHorizontalGroup(
            DiscipleshipHomepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(DCAMaturityCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(DCABasicCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(DLICombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(EncouterCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator2)
            .addComponent(jSeparator3)
            .addComponent(jSeparator4)
            .addComponent(jSeparator5)
            .addComponent(jSeparator6)
            .addGroup(DiscipleshipHomepanelLayout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DiscipleshipHomepanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dcaBackbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95))
        );
        DiscipleshipHomepanelLayout.setVerticalGroup(
            DiscipleshipHomepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DiscipleshipHomepanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DCABasicCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DCAMaturityCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(EncouterCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DLICombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(dcaBackbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(84, Short.MAX_VALUE))
        );

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/OkotaArea/DC Wallpaper101.png"))); // NOI18N

        updatediscipleshipLabel.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N

        updateDispleshipButton.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        updateDispleshipButton.setText("SAVE");
        updateDispleshipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDispleshipButtonActionPerformed(evt);
            }
        });

        FirstNameTf.setFont(new java.awt.Font("Bell MT", 1, 20)); // NOI18N

        LastNameTf.setFont(new java.awt.Font("Bell MT", 1, 20)); // NOI18N

        PhoneNumberTF.setFont(new java.awt.Font("Bell MT", 1, 20)); // NOI18N

        HomeCellJurisdiction.setFont(new java.awt.Font("Bell MT", 1, 20)); // NOI18N

        javax.swing.GroupLayout UpdateDiscipleshipRegPanelLayout = new javax.swing.GroupLayout(UpdateDiscipleshipRegPanel);
        UpdateDiscipleshipRegPanel.setLayout(UpdateDiscipleshipRegPanelLayout);
        UpdateDiscipleshipRegPanelLayout.setHorizontalGroup(
            UpdateDiscipleshipRegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateDiscipleshipRegPanelLayout.createSequentialGroup()
                .addGroup(UpdateDiscipleshipRegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpdateDiscipleshipRegPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(UpdateDiscipleshipRegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PhoneNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(UpdateDiscipleshipRegPanelLayout.createSequentialGroup()
                                .addComponent(FirstNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56)
                                .addGroup(UpdateDiscipleshipRegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(HomeCellJurisdiction, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LastNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(basicDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updatediscipleshipLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(UpdateDiscipleshipRegPanelLayout.createSequentialGroup()
                        .addGap(369, 369, 369)
                        .addComponent(updateDispleshipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(365, Short.MAX_VALUE))
        );
        UpdateDiscipleshipRegPanelLayout.setVerticalGroup(
            UpdateDiscipleshipRegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateDiscipleshipRegPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(UpdateDiscipleshipRegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FirstNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LastNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(100, 100, 100)
                .addGroup(UpdateDiscipleshipRegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PhoneNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HomeCellJurisdiction, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68)
                .addComponent(basicDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updatediscipleshipLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(140, 140, 140)
                .addComponent(updateDispleshipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(191, Short.MAX_VALUE))
        );

        alldiscipleshipTable.setBackground(new java.awt.Color(51, 51, 51));
        alldiscipleshipTable.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        alldiscipleshipTable.setForeground(new java.awt.Color(255, 255, 255));
        alldiscipleshipTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Last Name", "Phone No", "Email", "Address", "Cell Jurisdiction", "Gender", "Marital Status", "Mvp date", "2nd Time", "Date Attended"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(alldiscipleshipTable);

        DiscipleshipAllattendeLabel.setFont(new java.awt.Font("Bell MT", 1, 40)); // NOI18N
        DiscipleshipAllattendeLabel.setForeground(new java.awt.Color(51, 51, 51));

        sendmessageCombobox.setBackground(new java.awt.Color(204, 204, 204));
        sendmessageCombobox.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        sendmessageCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Generate Contact Details", "Generate Email(s)", "Generate Phone Number(s)", "Generate Number with name", "Generate Email with name" }));
        sendmessageCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendmessageComboboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AllAttendedDiscipleshipRegPanelLayout = new javax.swing.GroupLayout(AllAttendedDiscipleshipRegPanel);
        AllAttendedDiscipleshipRegPanel.setLayout(AllAttendedDiscipleshipRegPanelLayout);
        AllAttendedDiscipleshipRegPanelLayout.setHorizontalGroup(
            AllAttendedDiscipleshipRegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 1205, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AllAttendedDiscipleshipRegPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(AllAttendedDiscipleshipRegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AllAttendedDiscipleshipRegPanelLayout.createSequentialGroup()
                        .addComponent(DiscipleshipAllattendeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(159, 159, 159))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AllAttendedDiscipleshipRegPanelLayout.createSequentialGroup()
                        .addComponent(sendmessageCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        AllAttendedDiscipleshipRegPanelLayout.setVerticalGroup(
            AllAttendedDiscipleshipRegPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AllAttendedDiscipleshipRegPanelLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(DiscipleshipAllattendeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sendmessageCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout BackgroundPanelLayout = new javax.swing.GroupLayout(BackgroundPanel);
        BackgroundPanel.setLayout(BackgroundPanelLayout);
        BackgroundPanelLayout.setHorizontalGroup(
            BackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1205, Short.MAX_VALUE)
            .addGroup(BackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(UpdateDiscipleshipRegPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(BackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(AllAttendedDiscipleshipRegPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        BackgroundPanelLayout.setVerticalGroup(
            BackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 772, Short.MAX_VALUE)
            .addGroup(BackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(UpdateDiscipleshipRegPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(BackgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(AllAttendedDiscipleshipRegPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(DiscipleshipHomepanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BackgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(DiscipleshipHomepanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(BackgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dcaBackbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dcaBackbuttonActionPerformed
        // TODO add your handling code here:
        front.updatePanel(home);
    }//GEN-LAST:event_dcaBackbuttonActionPerformed

    private void DCABasicComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DCABasicComboboxActionPerformed
        // TODO add your handling code here:
        String DCA = (String)DCABasicCombobox.getSelectedItem();
        if(null != DCA)
        switch (DCA) {
         case "Update DCA Basic":
             UpdateDiscipleshipRegPanel.setVisible(true);
             NewupdatePanel(UpdateDiscipleshipRegPanel);
             updatediscipleshipLabel.setText("ENTER DATE GRADUATED FROM DCA BASIC");
             break;
         case "All Attended DCA Basic":{
             AllAttendedDiscipleshipRegPanel.setVisible(true);
             NewupdatePanel(AllAttendedDiscipleshipRegPanel);
             HashMap<String, String[]> objMap = db.getallattendbasic();
             TabularRecordUpdater up = new TabularRecordUpdater(objMap,this);
             up.populateallattendTable(objMap);
             DiscipleshipAllattendeLabel.setText("All Attended DCA Basic");
                 break;
             }
         case "All Not Attended DCA Basic":{
             AllAttendedDiscipleshipRegPanel.setVisible(true);
             NewupdatePanel(AllAttendedDiscipleshipRegPanel);
             HashMap<String, String[]> objMap = db.getallnotattendbasic();
             TabularRecordUpdater up = new TabularRecordUpdater(objMap,this);
             up.populateallattendTable(objMap);
             DiscipleshipAllattendeLabel.setText("All Not Attended DCA Basic");
                 break;       
             }
         default:
     }       
    }//GEN-LAST:event_DCABasicComboboxActionPerformed

    private void DCAMaturityComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DCAMaturityComboboxActionPerformed
        // TODO add your handling code here:
        String Mat = (String)DCAMaturityCombobox.getSelectedItem();
        if(null != Mat)
        switch (Mat) {
         case "Update DCA Maturity": 
             UpdateDiscipleshipRegPanel.setVisible(true);
             NewupdatePanel(UpdateDiscipleshipRegPanel);
             updatediscipleshipLabel.setText("ENTER DATE GRADUATED FROM DCA MATURITY");
             break;
         case "All Attended DCA Maturity":{
             AllAttendedDiscipleshipRegPanel.setVisible(true);
             NewupdatePanel(AllAttendedDiscipleshipRegPanel);
             HashMap<String, String[]> objMap = db.getallattendmat();
             TabularRecordUpdater up = new TabularRecordUpdater(objMap,this);
             up.populateallattendTable(objMap);
             DiscipleshipAllattendeLabel.setText("All Attended DCA Maturity");
                 break;
             }
         case "All Not Attended DCA Maturity":{
             AllAttendedDiscipleshipRegPanel.setVisible(true);
             NewupdatePanel(AllAttendedDiscipleshipRegPanel);
             HashMap<String, String[]> objMap = db.getallnotattendmat();
             TabularRecordUpdater up = new TabularRecordUpdater(objMap,this);
             up.populateallattendTable(objMap);
             DiscipleshipAllattendeLabel.setText("All Not Attended DCA Maturity");
                 break;
             }    
         default:
     }    
    }//GEN-LAST:event_DCAMaturityComboboxActionPerformed

    private void EncouterComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncouterComboboxActionPerformed
        // TODO add your handling code here:
        String Enc = (String)EncouterCombobox.getSelectedItem();
        if(null != Enc)
        switch (Enc) {
         case "Update Encounter": 
             UpdateDiscipleshipRegPanel.setVisible(true);
             NewupdatePanel(UpdateDiscipleshipRegPanel);
             updatediscipleshipLabel.setText("ENTER DATE ATTENDED ENCOUNTER");
             break;
         case "All Attended Encounter":{
             AllAttendedDiscipleshipRegPanel.setVisible(true);
             NewupdatePanel(AllAttendedDiscipleshipRegPanel);
             HashMap<String, String[]> objMap = db.getallattendenc();
             TabularRecordUpdater up = new TabularRecordUpdater(objMap,this);
             up.populateallattendTable(objMap);
             DiscipleshipAllattendeLabel.setText("All Attended Encounter");
                 break;
             }
         case "All Not Attended Encounter":{
             AllAttendedDiscipleshipRegPanel.setVisible(true);
             NewupdatePanel(AllAttendedDiscipleshipRegPanel);
             HashMap<String, String[]> objMap = db.getallnotattendenc();
             TabularRecordUpdater up = new TabularRecordUpdater(objMap,this);
             up.populateallattendTable(objMap);
             DiscipleshipAllattendeLabel.setText("All Not Attended Encounter");
                 break;
             }     
         default:
     }     
    }//GEN-LAST:event_EncouterComboboxActionPerformed

    private void DLIComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DLIComboboxActionPerformed
        // TODO add your handling code here:
         String DLI = (String)DLICombobox.getSelectedItem();
        if(null != DLI)
        switch (DLI) {
         case "Update DLI": 
             UpdateDiscipleshipRegPanel.setVisible(true);
             NewupdatePanel(UpdateDiscipleshipRegPanel);
             updatediscipleshipLabel.setText("ENTER DATE GRADUATED FROM DLI");
             break;
         case "All Attended DLI":{
             AllAttendedDiscipleshipRegPanel.setVisible(true);
             NewupdatePanel(AllAttendedDiscipleshipRegPanel);
             HashMap<String, String[]> objMap = db.getallattenddli();
             TabularRecordUpdater up = new TabularRecordUpdater(objMap,this);
             up.populateallattendTable(objMap);
             DiscipleshipAllattendeLabel.setText("All Attended DLI");
                 break;
             }
         case "All Not Attended DLI":{
             AllAttendedDiscipleshipRegPanel.setVisible(true);
             NewupdatePanel(AllAttendedDiscipleshipRegPanel);
             HashMap<String, String[]> objMap = db.getallnotattenddli();
             if(objMap.isEmpty())
             {
                 JOptionPane.showMessageDialog(front, "Empty");
             }
             TabularRecordUpdater up = new TabularRecordUpdater(objMap,this);
             up.populateallattendTable(objMap);
             DiscipleshipAllattendeLabel.setText("All Not Attended DLI");
                 break;
             }     
         default:
     }     
    }//GEN-LAST:event_DLIComboboxActionPerformed

    private void updateDispleshipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDispleshipButtonActionPerformed
        // TODO add your handling code here:
        String text = updatediscipleshipLabel.getText();
        if(null != text)
        switch (text) {
         case "ENTER DATE GRADUATED FROM DCA BASIC":{
             SimpleDateFormat sFormat = new SimpleDateFormat("yyyy-MM-dd");
             Date dates =  basicDateChooser.getDate();
             String date = sFormat.format(dates);
             String fname= FirstNameTf.getText();
             String upbasichome=HomeCellJurisdiction.getText();
             String lname=LastNameTf.getText();
             String ph=PhoneNumberTF.getText();
             db.updatebasic(date,fname,upbasichome,lname,ph);
                 break;
             }
         case "ENTER DATE GRADUATED FROM DCA MATURITY":{
             SimpleDateFormat sFormat = new SimpleDateFormat("yyyy-MM-dd");
             Date dates =  basicDateChooser.getDate();
             String date = sFormat.format(dates);
             String fname= FirstNameTf.getText();
             String upMathome=HomeCellJurisdiction.getText();
             String lname=LastNameTf.getText();
             String ph=PhoneNumberTF.getText();
             db.updatemat(date,fname,upMathome,lname,ph);
                 break;
             }
         case "ENTER DATE ATTENDED ENCOUNTER":{
             SimpleDateFormat sFormat = new SimpleDateFormat("yyyy-MM-dd");
             Date dates =  basicDateChooser.getDate();
             String date = sFormat.format(dates);
             String fname= FirstNameTf.getText();
             String enchome=HomeCellJurisdiction.getText();
             String lname=LastNameTf.getText();
             String ph=PhoneNumberTF.getText();
             db.updateenc(date,fname,enchome,lname,ph);
                 break;
             }
         case "ENTER DATE GRADUATED FROM DLI":{
             SimpleDateFormat sFormat = new SimpleDateFormat("yyyy-MM-dd");
             Date dates =  basicDateChooser.getDate();
             String date = sFormat.format(dates);
             String fname= FirstNameTf.getText();
             String dlihome=HomeCellJurisdiction.getText();
             String lname=LastNameTf.getText();
             String ph=PhoneNumberTF.getText();
             db.updatedli(date,fname,dlihome,lname,ph);
                 break;
             }
         default:
     }
    }//GEN-LAST:event_updateDispleshipButtonActionPerformed

    private void DCABasicComboboxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DCABasicComboboxMouseEntered
        // TODO add your handling code here:
            Cursor handCursor = new Cursor (Cursor.HAND_CURSOR);
            Object obj = evt.getSource();
            JComboBox lb = (JComboBox) obj;
            lb.setCursor(handCursor);
    }//GEN-LAST:event_DCABasicComboboxMouseEntered

    private void sendmessageComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendmessageComboboxActionPerformed
        // TODO add your handling code here:
        String gen = (String)sendmessageCombobox.getSelectedItem();
        switch(gen)
        {

            case "Generate Email(s)":
            {
                d.getemails("Always delete File After Use before generating another Contact.");
                d.getemails("\t" + DiscipleshipAllattendeLabel.getText());
                int counts = alldiscipleshipTable.getRowCount();
                for (int j=0; j<counts; j++)
                {
                    String email = (String) alldiscipleshipTable.getValueAt(j,4);
                    d.getemails(email);
                }
                JOptionPane.showMessageDialog(front, "Generated Sucessfully");
                break;
            }
            case "Generate Phone Number(s)":
            {
                d.getNumber("Always delete File After Use before generating another Contact.");
                d.getNumber("\t" + DiscipleshipAllattendeLabel.getText());
                int count = alldiscipleshipTable.getRowCount();
                for (int i=0; i<count; i++)
                {
                    String ph = (String) alldiscipleshipTable.getValueAt(i,3);
                    d.getNumber(ph);
                }
                JOptionPane.showMessageDialog(front, "Generated Sucessfully");
                break;
            }
           case "Generate Number with name":
                {
                    d.getNumber("Always delete File After Use before generating another Contact List.");
                    d.getNumber("\t" + DiscipleshipAllattendeLabel.getText());
                    int count = alldiscipleshipTable.getRowCount();
                    for (int i=0; i<count; i++)
                    {
                        String ph = (String) alldiscipleshipTable.getValueAt(i,3);
                        String fn = (String) alldiscipleshipTable.getValueAt(i,1);
                        String ln = (String) alldiscipleshipTable.getValueAt(i,2);
                        d.getNumber(fn + "  " + ln + "\t"+ "\t" + ph);
                    }
                    JOptionPane.showMessageDialog(front, "Generated Sucessfully");
                    break;
                }
            case "Generate Email with name":
                {
                    d.getNumber("Always delete File After Use before generating another Contact List.");
                    d.getNumber("\t" + DiscipleshipAllattendeLabel.getText());
                    int count = alldiscipleshipTable.getRowCount();
                    for (int i=0; i<count; i++)
                    {
                        String email = (String) alldiscipleshipTable.getValueAt(i,4);
                        String fn = (String) alldiscipleshipTable.getValueAt(i,1);
                        String ln = (String) alldiscipleshipTable.getValueAt(i,2);
                        d.getemails(fn + "  " + ln + "\t"+ "\t" + email);
                    }
                    JOptionPane.showMessageDialog(front, "Generated Sucessfully");
                    break;
                }
            default:
        }
    }//GEN-LAST:event_sendmessageComboboxActionPerformed

    public JTable getAlldiscipleshipTable() {
        return alldiscipleshipTable;
    }

public void NewupdatePanel (JPanel currentPanel)
    {
        BackgroundPanel.removeAll();   
        GroupLayout l = (GroupLayout) BackgroundPanel.getLayout();   
        l.setHorizontalGroup(
            l.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(currentPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        l.setVerticalGroup(
            l.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(currentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AllAttendedDiscipleshipRegPanel;
    private javax.swing.JPanel BackgroundPanel;
    private javax.swing.JComboBox DCABasicCombobox;
    private javax.swing.JComboBox DCAMaturityCombobox;
    private javax.swing.JComboBox DLICombobox;
    private javax.swing.JLabel DiscipleshipAllattendeLabel;
    private javax.swing.JPanel DiscipleshipHomepanel;
    private javax.swing.JComboBox EncouterCombobox;
    private javax.swing.JTextField FirstNameTf;
    private javax.swing.JTextField HomeCellJurisdiction;
    private javax.swing.JTextField LastNameTf;
    private javax.swing.JTextField PhoneNumberTF;
    private javax.swing.JPanel UpdateDiscipleshipRegPanel;
    private javax.swing.JTable alldiscipleshipTable;
    private com.toedter.calendar.JDateChooser basicDateChooser;
    private javax.swing.JButton dcaBackbutton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JComboBox sendmessageCombobox;
    private javax.swing.JButton updateDispleshipButton;
    private javax.swing.JLabel updatediscipleshipLabel;
    // End of variables declaration//GEN-END:variables
}
